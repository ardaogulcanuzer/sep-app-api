// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/berkaymuratt/sep-app-api/services (interfaces: DiseasesServiceI)

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	dtos "github.com/berkaymuratt/sep-app-api/dtos"
	models "github.com/berkaymuratt/sep-app-api/models"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockDiseasesServiceI is a mock of DiseasesServiceI interface.
type MockDiseasesServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockDiseasesServiceIMockRecorder
}

// MockDiseasesServiceIMockRecorder is the mock recorder for MockDiseasesServiceI.
type MockDiseasesServiceIMockRecorder struct {
	mock *MockDiseasesServiceI
}

// NewMockDiseasesServiceI creates a new mock instance.
func NewMockDiseasesServiceI(ctrl *gomock.Controller) *MockDiseasesServiceI {
	mock := &MockDiseasesServiceI{ctrl: ctrl}
	mock.recorder = &MockDiseasesServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiseasesServiceI) EXPECT() *MockDiseasesServiceIMockRecorder {
	return m.recorder
}

// AddDisease mocks base method.
func (m *MockDiseasesServiceI) AddDisease(arg0 models.Disease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDisease", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDisease indicates an expected call of AddDisease.
func (mr *MockDiseasesServiceIMockRecorder) AddDisease(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDisease", reflect.TypeOf((*MockDiseasesServiceI)(nil).AddDisease), arg0)
}

// DeleteDisease mocks base method.
func (m *MockDiseasesServiceI) DeleteDisease(arg0 primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDisease", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDisease indicates an expected call of DeleteDisease.
func (mr *MockDiseasesServiceIMockRecorder) DeleteDisease(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDisease", reflect.TypeOf((*MockDiseasesServiceI)(nil).DeleteDisease), arg0)
}

// GetDiseases mocks base method.
func (m *MockDiseasesServiceI) GetDiseases() ([]*dtos.DiseaseDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiseases")
	ret0, _ := ret[0].([]*dtos.DiseaseDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiseases indicates an expected call of GetDiseases.
func (mr *MockDiseasesServiceIMockRecorder) GetDiseases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiseases", reflect.TypeOf((*MockDiseasesServiceI)(nil).GetDiseases))
}

// GetDiseasesByIds mocks base method.
func (m *MockDiseasesServiceI) GetDiseasesByIds(arg0 []primitive.ObjectID) ([]*dtos.DiseaseDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiseasesByIds", arg0)
	ret0, _ := ret[0].([]*dtos.DiseaseDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiseasesByIds indicates an expected call of GetDiseasesByIds.
func (mr *MockDiseasesServiceIMockRecorder) GetDiseasesByIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiseasesByIds", reflect.TypeOf((*MockDiseasesServiceI)(nil).GetDiseasesByIds), arg0)
}

// UpdateDisease mocks base method.
func (m *MockDiseasesServiceI) UpdateDisease(arg0 primitive.ObjectID, arg1 models.Disease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDisease", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDisease indicates an expected call of UpdateDisease.
func (mr *MockDiseasesServiceIMockRecorder) UpdateDisease(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDisease", reflect.TypeOf((*MockDiseasesServiceI)(nil).UpdateDisease), arg0, arg1)
}
