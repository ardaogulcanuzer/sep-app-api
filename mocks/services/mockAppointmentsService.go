// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/berkaymuratt/sep-app-api/services (interfaces: AppointmentsServiceI)

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"
	time "time"

	dtos "github.com/berkaymuratt/sep-app-api/dtos"
	models "github.com/berkaymuratt/sep-app-api/models"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockAppointmentsServiceI is a mock of AppointmentsServiceI interface.
type MockAppointmentsServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockAppointmentsServiceIMockRecorder
}

// MockAppointmentsServiceIMockRecorder is the mock recorder for MockAppointmentsServiceI.
type MockAppointmentsServiceIMockRecorder struct {
	mock *MockAppointmentsServiceI
}

// NewMockAppointmentsServiceI creates a new mock instance.
func NewMockAppointmentsServiceI(ctrl *gomock.Controller) *MockAppointmentsServiceI {
	mock := &MockAppointmentsServiceI{ctrl: ctrl}
	mock.recorder = &MockAppointmentsServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppointmentsServiceI) EXPECT() *MockAppointmentsServiceIMockRecorder {
	return m.recorder
}

// AddAppointment mocks base method.
func (m *MockAppointmentsServiceI) AddAppointment(arg0 models.Appointment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAppointment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAppointment indicates an expected call of AddAppointment.
func (mr *MockAppointmentsServiceIMockRecorder) AddAppointment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppointment", reflect.TypeOf((*MockAppointmentsServiceI)(nil).AddAppointment), arg0)
}

// DeleteAppointment mocks base method.
func (m *MockAppointmentsServiceI) DeleteAppointment(arg0 primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppointment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppointment indicates an expected call of DeleteAppointment.
func (mr *MockAppointmentsServiceIMockRecorder) DeleteAppointment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppointment", reflect.TypeOf((*MockAppointmentsServiceI)(nil).DeleteAppointment), arg0)
}

// GetAppointmentById mocks base method.
func (m *MockAppointmentsServiceI) GetAppointmentById(arg0 primitive.ObjectID) (*dtos.AppointmentDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointmentById", arg0)
	ret0, _ := ret[0].(*dtos.AppointmentDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointmentById indicates an expected call of GetAppointmentById.
func (mr *MockAppointmentsServiceIMockRecorder) GetAppointmentById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointmentById", reflect.TypeOf((*MockAppointmentsServiceI)(nil).GetAppointmentById), arg0)
}

// GetAppointments mocks base method.
func (m *MockAppointmentsServiceI) GetAppointments(arg0, arg1 *primitive.ObjectID) ([]*dtos.AppointmentDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointments", arg0, arg1)
	ret0, _ := ret[0].([]*dtos.AppointmentDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointments indicates an expected call of GetAppointments.
func (mr *MockAppointmentsServiceIMockRecorder) GetAppointments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointments", reflect.TypeOf((*MockAppointmentsServiceI)(nil).GetAppointments), arg0, arg1)
}

// IsDateAvailable mocks base method.
func (m *MockAppointmentsServiceI) IsDateAvailable(arg0, arg1 primitive.ObjectID, arg2 time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDateAvailable", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDateAvailable indicates an expected call of IsDateAvailable.
func (mr *MockAppointmentsServiceIMockRecorder) IsDateAvailable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDateAvailable", reflect.TypeOf((*MockAppointmentsServiceI)(nil).IsDateAvailable), arg0, arg1, arg2)
}

// UpdateAppointmentDate mocks base method.
func (m *MockAppointmentsServiceI) UpdateAppointmentDate(arg0 primitive.ObjectID, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppointmentDate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAppointmentDate indicates an expected call of UpdateAppointmentDate.
func (mr *MockAppointmentsServiceIMockRecorder) UpdateAppointmentDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppointmentDate", reflect.TypeOf((*MockAppointmentsServiceI)(nil).UpdateAppointmentDate), arg0, arg1)
}
