// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/berkaymuratt/sep-app-api/services (interfaces: PatientsServiceI)

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	dtos "github.com/berkaymuratt/sep-app-api/dtos"
	models "github.com/berkaymuratt/sep-app-api/models"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockPatientsServiceI is a mock of PatientsServiceI interface.
type MockPatientsServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockPatientsServiceIMockRecorder
}

// MockPatientsServiceIMockRecorder is the mock recorder for MockPatientsServiceI.
type MockPatientsServiceIMockRecorder struct {
	mock *MockPatientsServiceI
}

// NewMockPatientsServiceI creates a new mock instance.
func NewMockPatientsServiceI(ctrl *gomock.Controller) *MockPatientsServiceI {
	mock := &MockPatientsServiceI{ctrl: ctrl}
	mock.recorder = &MockPatientsServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientsServiceI) EXPECT() *MockPatientsServiceIMockRecorder {
	return m.recorder
}

// AddPatient mocks base method.
func (m *MockPatientsServiceI) AddPatient(arg0 models.Patient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPatient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPatient indicates an expected call of AddPatient.
func (mr *MockPatientsServiceIMockRecorder) AddPatient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPatient", reflect.TypeOf((*MockPatientsServiceI)(nil).AddPatient), arg0)
}

// GetPatientById mocks base method.
func (m *MockPatientsServiceI) GetPatientById(arg0 primitive.ObjectID) (*dtos.PatientDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientById", arg0)
	ret0, _ := ret[0].(*dtos.PatientDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientById indicates an expected call of GetPatientById.
func (mr *MockPatientsServiceIMockRecorder) GetPatientById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientById", reflect.TypeOf((*MockPatientsServiceI)(nil).GetPatientById), arg0)
}

// GetPatientByUserId mocks base method.
func (m *MockPatientsServiceI) GetPatientByUserId(arg0 string) (*dtos.PatientDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientByUserId", arg0)
	ret0, _ := ret[0].(*dtos.PatientDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientByUserId indicates an expected call of GetPatientByUserId.
func (mr *MockPatientsServiceIMockRecorder) GetPatientByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientByUserId", reflect.TypeOf((*MockPatientsServiceI)(nil).GetPatientByUserId), arg0)
}

// GetPatients mocks base method.
func (m *MockPatientsServiceI) GetPatients() ([]*dtos.PatientDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatients")
	ret0, _ := ret[0].([]*dtos.PatientDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatients indicates an expected call of GetPatients.
func (mr *MockPatientsServiceIMockRecorder) GetPatients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatients", reflect.TypeOf((*MockPatientsServiceI)(nil).GetPatients))
}

// GetPatientsByDoctorId mocks base method.
func (m *MockPatientsServiceI) GetPatientsByDoctorId(arg0 primitive.ObjectID) ([]*dtos.PatientDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientsByDoctorId", arg0)
	ret0, _ := ret[0].([]*dtos.PatientDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientsByDoctorId indicates an expected call of GetPatientsByDoctorId.
func (mr *MockPatientsServiceIMockRecorder) GetPatientsByDoctorId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientsByDoctorId", reflect.TypeOf((*MockPatientsServiceI)(nil).GetPatientsByDoctorId), arg0)
}

// IsUserIdExist mocks base method.
func (m *MockPatientsServiceI) IsUserIdExist(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserIdExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserIdExist indicates an expected call of IsUserIdExist.
func (mr *MockPatientsServiceIMockRecorder) IsUserIdExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserIdExist", reflect.TypeOf((*MockPatientsServiceI)(nil).IsUserIdExist), arg0)
}

// UpdatePatient mocks base method.
func (m *MockPatientsServiceI) UpdatePatient(arg0 primitive.ObjectID, arg1 dtos.PatientDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePatient indicates an expected call of UpdatePatient.
func (mr *MockPatientsServiceIMockRecorder) UpdatePatient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatient", reflect.TypeOf((*MockPatientsServiceI)(nil).UpdatePatient), arg0, arg1)
}
