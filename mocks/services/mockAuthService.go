// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/berkaymuratt/sep-app-api/services (interfaces: AuthServiceI)

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	dtos "github.com/berkaymuratt/sep-app-api/dtos"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockAuthServiceI is a mock of AuthServiceI interface.
type MockAuthServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceIMockRecorder
}

// MockAuthServiceIMockRecorder is the mock recorder for MockAuthServiceI.
type MockAuthServiceIMockRecorder struct {
	mock *MockAuthServiceI
}

// NewMockAuthServiceI creates a new mock instance.
func NewMockAuthServiceI(ctrl *gomock.Controller) *MockAuthServiceI {
	mock := &MockAuthServiceI{ctrl: ctrl}
	mock.recorder = &MockAuthServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceI) EXPECT() *MockAuthServiceIMockRecorder {
	return m.recorder
}

// LoginAsDoctor mocks base method.
func (m *MockAuthServiceI) LoginAsDoctor(arg0, arg1 string) (*dtos.DoctorDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAsDoctor", arg0, arg1)
	ret0, _ := ret[0].(*dtos.DoctorDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginAsDoctor indicates an expected call of LoginAsDoctor.
func (mr *MockAuthServiceIMockRecorder) LoginAsDoctor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAsDoctor", reflect.TypeOf((*MockAuthServiceI)(nil).LoginAsDoctor), arg0, arg1)
}

// LoginAsPatient mocks base method.
func (m *MockAuthServiceI) LoginAsPatient(arg0, arg1 string) (*dtos.PatientDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAsPatient", arg0, arg1)
	ret0, _ := ret[0].(*dtos.PatientDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginAsPatient indicates an expected call of LoginAsPatient.
func (mr *MockAuthServiceIMockRecorder) LoginAsPatient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAsPatient", reflect.TypeOf((*MockAuthServiceI)(nil).LoginAsPatient), arg0, arg1)
}

// UpdateDoctorPassword mocks base method.
func (m *MockAuthServiceI) UpdateDoctorPassword(arg0 primitive.ObjectID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDoctorPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDoctorPassword indicates an expected call of UpdateDoctorPassword.
func (mr *MockAuthServiceIMockRecorder) UpdateDoctorPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDoctorPassword", reflect.TypeOf((*MockAuthServiceI)(nil).UpdateDoctorPassword), arg0, arg1)
}

// UpdatePatientPassword mocks base method.
func (m *MockAuthServiceI) UpdatePatientPassword(arg0 primitive.ObjectID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatientPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePatientPassword indicates an expected call of UpdatePatientPassword.
func (mr *MockAuthServiceIMockRecorder) UpdatePatientPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientPassword", reflect.TypeOf((*MockAuthServiceI)(nil).UpdatePatientPassword), arg0, arg1)
}
