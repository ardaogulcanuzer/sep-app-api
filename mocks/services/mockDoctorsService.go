// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/berkaymuratt/sep-app-api/services (interfaces: DoctorsServiceI)

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"
	time "time"

	dtos "github.com/berkaymuratt/sep-app-api/dtos"
	models "github.com/berkaymuratt/sep-app-api/models"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockDoctorsServiceI is a mock of DoctorsServiceI interface.
type MockDoctorsServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockDoctorsServiceIMockRecorder
}

// MockDoctorsServiceIMockRecorder is the mock recorder for MockDoctorsServiceI.
type MockDoctorsServiceIMockRecorder struct {
	mock *MockDoctorsServiceI
}

// NewMockDoctorsServiceI creates a new mock instance.
func NewMockDoctorsServiceI(ctrl *gomock.Controller) *MockDoctorsServiceI {
	mock := &MockDoctorsServiceI{ctrl: ctrl}
	mock.recorder = &MockDoctorsServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoctorsServiceI) EXPECT() *MockDoctorsServiceIMockRecorder {
	return m.recorder
}

// AddDoctor mocks base method.
func (m *MockDoctorsServiceI) AddDoctor(arg0 models.Doctor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDoctor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDoctor indicates an expected call of AddDoctor.
func (mr *MockDoctorsServiceIMockRecorder) AddDoctor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDoctor", reflect.TypeOf((*MockDoctorsServiceI)(nil).AddDoctor), arg0)
}

// GetBusyTimes mocks base method.
func (m *MockDoctorsServiceI) GetBusyTimes(arg0 primitive.ObjectID, arg1 time.Time) ([]time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusyTimes", arg0, arg1)
	ret0, _ := ret[0].([]time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusyTimes indicates an expected call of GetBusyTimes.
func (mr *MockDoctorsServiceIMockRecorder) GetBusyTimes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusyTimes", reflect.TypeOf((*MockDoctorsServiceI)(nil).GetBusyTimes), arg0, arg1)
}

// GetDoctorById mocks base method.
func (m *MockDoctorsServiceI) GetDoctorById(arg0 primitive.ObjectID) (*dtos.DoctorDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorById", arg0)
	ret0, _ := ret[0].(*dtos.DoctorDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorById indicates an expected call of GetDoctorById.
func (mr *MockDoctorsServiceIMockRecorder) GetDoctorById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorById", reflect.TypeOf((*MockDoctorsServiceI)(nil).GetDoctorById), arg0)
}

// GetDoctorByUserId mocks base method.
func (m *MockDoctorsServiceI) GetDoctorByUserId(arg0 string) (*dtos.DoctorDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorByUserId", arg0)
	ret0, _ := ret[0].(*dtos.DoctorDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorByUserId indicates an expected call of GetDoctorByUserId.
func (mr *MockDoctorsServiceIMockRecorder) GetDoctorByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorByUserId", reflect.TypeOf((*MockDoctorsServiceI)(nil).GetDoctorByUserId), arg0)
}

// GetDoctors mocks base method.
func (m *MockDoctorsServiceI) GetDoctors() ([]*dtos.DoctorDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctors")
	ret0, _ := ret[0].([]*dtos.DoctorDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctors indicates an expected call of GetDoctors.
func (mr *MockDoctorsServiceIMockRecorder) GetDoctors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctors", reflect.TypeOf((*MockDoctorsServiceI)(nil).GetDoctors))
}

// IsUserIdExist mocks base method.
func (m *MockDoctorsServiceI) IsUserIdExist(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserIdExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserIdExist indicates an expected call of IsUserIdExist.
func (mr *MockDoctorsServiceIMockRecorder) IsUserIdExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserIdExist", reflect.TypeOf((*MockDoctorsServiceI)(nil).IsUserIdExist), arg0)
}

// UpdateDoctor mocks base method.
func (m *MockDoctorsServiceI) UpdateDoctor(arg0 primitive.ObjectID, arg1 dtos.DoctorDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDoctor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDoctor indicates an expected call of UpdateDoctor.
func (mr *MockDoctorsServiceIMockRecorder) UpdateDoctor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDoctor", reflect.TypeOf((*MockDoctorsServiceI)(nil).UpdateDoctor), arg0, arg1)
}
